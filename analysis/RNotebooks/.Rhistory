<<<<<<< HEAD
data <- data %>% mutate(length = nchar(result))
data$taskid
x = "Hello World"
x
x[4]
x[1]
x[1][2]
x / 10
x : 10
x = 121
x / 10
x // 10
x / 10
x %% 10
x % 10
x = 121
x % 10
div(x, 10)
floor(x, 10)
floor(x/10)
x = 121
floor(x/10)
x = 123
floor(x/10)
div(x, 10)
data$taskid
data$taskid / 10
floor(data$taskid / 10)
head(data)
data <- data %>% mutate(subject = floor(taskid/10))
head(data)
head(data, 20)
head(data, 10)
# The data of all users combined to one DataFrame
data <- bind_rows(all_users)
overview <- function(df, col, bin_width, filter_by_method=-1, filter_by_task=-1) {
if (filter_by_method != -1) {
df <- df %>% filter(method == filter_by_method)
}
if (filter_by_task != -1) {
df <- df %>% filter(task == filter_by_task)
}
vals <- df %>% pull(col)
q1 <- quantile(vals, 0.25)
q3 <- quantile(vals, 0.75)
median <- quantile(vals, 0.5)
mean <- mean(vals)
hist <- qplot(x, geom='histogram',
binwidth = bin_width,
xlab = col,
ylab = 'Frequency',
fill=I("blue"),
col=I("darkblue"),
alpha=I(.2),
show.legend=TRUE) +
geom_vline(aes(xintercept=median,
color=I("Median")),
linetype="solid",
size=1,
show.legend=TRUE) +
geom_vline(aes(xintercept=q1,
color=I("Q1/Q3")),
linetype="solid",
size=1,
show.legend=TRUE) +
geom_vline(aes(xintercept=q3,
color=I("Q1/Q3")),
linetype="solid",
size=1,
show.legend=TRUE) +
geom_vline(aes(xintercept=mean,
color=I("Mean")),
linetype="solid",
size=1) +
scale_colour_manual("",
breaks = c("Mean", "Median", "Q1/Q3"),
values = c("purple", "orange", "green"))
print(hist)
# TODO: Print values like mean, median, standard deviation ...
print(paste("Mean:", mean, "\nQ1: ", q1))
return (vals)
}
x <- overview(data, 'time', 30, 0)
=======
}
data_cols = list(
"question0",
"question1",
"question2",
"question3",
"question4",
"question5"
)
for (col in data_cols)
{
print(sprintf("*****************************"))
print(sprintf("Analyzing %s ...", col))
print(sprintf("*****************************"))
formula <- paste(col, "~ method")
print(sprintf("Using formula: %s", formula))
gee <- ordLORgee(formula, id = data$User, data = data)
print(summary(gee))
print(exp(coef(gee)))
}
library(plyr)
library(dplyr)
library(psych)
library(stringr)
library(ggplot2)
library(lmerTest)
library(report)
library(coin)
library(multcomp)
library(multgee)
data_cols = list(
"question0",
"question1",
"question2",
"question3",
"question4",
"question5"
)
for (col in data_cols)
{
print(sprintf("*****************************"))
print(sprintf("Analyzing %s ...", col))
print(sprintf("*****************************"))
formula <- paste(col, "~ method")
print(sprintf("Using formula: %s", formula))
gee <- ordLORgee(formula, id = data$User, data = data)
print(summary(gee))
print(exp(coef(gee)))
}
library(plyr)
library(dplyr)
library(psych)
library(stringr)
library(ggplot2)
library(lmerTest)
library(report)
library(coin)
library(multcomp)
library(multgee)
data_cols = list(
"question0",
"question1",
"question2",
"question3",
"question4",
"question5"
)
for (col in data_cols)
{
print(sprintf("*****************************"))
print(sprintf("Analyzing %s ...", col))
print(sprintf("*****************************"))
formula <- paste(col, "~ method")
print(sprintf("Using formula: %s", formula))
gee <- ordLORgee(formula, id = data$User, data = data)
print(summary(gee))
print(exp(coef(gee)))
}
data_cols = list(
"question0",
"question1",
"question2",
"question3",
"question4",
"question5"
)
for (col in data_cols)
{
print(sprintf("*****************************"))
print(sprintf("Analyzing %s ...", col))
print(sprintf("*****************************"))
formula <- paste(col, "~ method")
print(sprintf("Using formula: %s", formula))
gee <- ordLORgee(formula, id = data$subject, data = data)
print(summary(gee))
print(exp(coef(gee)))
}
data$subject <- as.factor(data$subject)
data_cols = list(
"question0",
"question1",
"question2",
"question3",
"question4",
"question5"
)
for (col in data_cols)
{
print(sprintf("*****************************"))
print(sprintf("Analyzing %s ...", col))
print(sprintf("*****************************"))
formula <- paste(col, "~ method")
print(sprintf("Using formula: %s", formula))
gee <- ordLORgee(formula, id = data$subject, data = data)
print(summary(gee))
print(exp(coef(gee)))
}
# users taken out of analysis: user13 (had bugs on one technique), user30 (done it on laptop)
all_users <- list(user12, user14, user15, user16, user17, user18, user19, user20, user21, user22, user23, user24, user25, user26, user27, user28, user31, user32)
# The data of all users combined to one DataFrame
data <- bind_rows(all_users)
>>>>>>> d5e25a5 (added code for counts and task completion time)
# Add column for the real needed time (without the time used for generating)
data <- data %>% mutate(time = needed_time - time_generating)
# Add column for the length of the result (in characters)
data <- data %>% mutate(length = nchar(result))
# Add column for the subject (the userId)
data <- data %>% mutate(subject = floor(taskid/10))
head(data, 10)
# replace \n in result texts by whitespaces (to eliminate them from word counts)
data <- data %>% mutate(result = gsub('\\\\n|\\\\r', " ", result))
# compute and add WPM (according to related work simply divide the time by 5)
data <- data %>% mutate(wpm = (length/5)/(time/60))
# count words of text
data <- data %>% mutate(word_count=str_count(result, "\\w+"))
# compute time in minutes
data <- data %>% mutate(time_minutes = (time/60))
# compute wpm based on time and word count
data <- data %>% mutate(wpm_time_word_count = word_count / time_minutes)
data$subject <- as.factor(data$subject)
data_cols = list(
"question0",
"question1",
"question2",
"question3",
"question4",
"question5"
)
for (col in data_cols)
{
print(sprintf("*****************************"))
print(sprintf("Analyzing %s ...", col))
print(sprintf("*****************************"))
formula <- paste(col, "~ method")
print(sprintf("Using formula: %s", formula))
gee <- ordLORgee(formula, id = data$subject, data = data)
print(summary(gee))
print(exp(coef(gee)))
}
data$subject <- as.factor(data$subject)
data$method <- as.factor(data$method)
data_cols = list(
"question0",
"question1",
"question2",
"question3",
"question4",
"question5"
)
for (col in data_cols)
{
print(sprintf("*****************************"))
print(sprintf("Analyzing %s ...", col))
print(sprintf("*****************************"))
formula <- paste(col, "~ method")
print(sprintf("Using formula: %s", formula))
gee <- ordLORgee(formula, id = data$subject, data = data)
print(summary(gee))
print(exp(coef(gee)))
}
boxplot(amount_backs ~ method, data = data_counts)
boxplot(amount_backs ~ method, data = data_counts)
boxplot(amount_actions ~ method, data = data_counts)
View(data)
# users taken out of analysis: user13 (had bugs on one technique), user30 (done it on laptop)
all_users <- list(user12, user14, user15, user16, user17, user18, user19, user20, user21, user22, user23, user24, user25, user26, user27, user28, user31, user32)
# The data of all users combined to one DataFrame
data <- bind_rows(all_users)
# Add column for the real needed time (without the time used for generating)
data <- data %>% mutate(time = needed_time - time_generating)
# Add column for the length of the result (in characters)
data <- data %>% mutate(length = nchar(result))
# Add column for the subject (the userId)
data <- data %>% mutate(subject = floor(taskid/10))
head(data, 10)
# replace \n in result texts by whitespaces (to eliminate them from word counts)
data <- data %>% mutate(result = gsub('\\\\n|\\\\r', " ", result))
# compute and add WPM (according to related work simply divide the time by 5)
data <- data %>% mutate(wpm = (length/5)/(time/60))
# count words of text
data <- data %>% mutate(word_count=str_count(result, "\\w+"))
# compute time in minutes
data <- data %>% mutate(time_minutes = (time/60))
# compute wpm based on time and word count
data <- data %>% mutate(wpm_time_word_count = word_count / time_minutes)
data$subject <- as.factor(data$subject)
data$method <- as.factor(data$method)
data_cols = list(
"question0",
"question1",
"question2",
"question3",
"question4",
"question5"
)
for (col in data_cols)
{
print(sprintf("*****************************"))
print(sprintf("Analyzing %s ...", col))
print(sprintf("*****************************"))
formula <- paste(col, "~ method")
print(sprintf("Using formula: %s", formula))
gee <- ordLORgee(formula, id = data$subject, data = data)
print(summary(gee))
print(exp(coef(gee)))
}
View(data)
data$subject <- as.factor(data$subject)
data$method <- as.factor(data$method)
data_cols = list(
"question0",
"question1",
"question2",
"question3",
"question4",
"question5"
)
for (col in data_cols)
{
data[, col] <- as.ordered(data[, col])
}
for (col in data_cols)
{
print(sprintf("*****************************"))
print(sprintf("Analyzing %s ...", col))
print(sprintf("*****************************"))
formula <- paste(col, "~ method")
print(sprintf("Using formula: %s", formula))
gee <- ordLORgee(formula, id = data$subject, data = data)
print(summary(gee))
print(exp(coef(gee)))
}
# users taken out of analysis: user13 (had bugs on one technique), user30 (done it on laptop)
all_users <- list(user12, user14, user15, user16, user17, user18, user19, user20, user21, user22, user23, user24, user25, user26, user27, user28, user31, user32)
# The data of all users combined to one DataFrame
data <- bind_rows(all_users)
# Add column for the real needed time (without the time used for generating)
data <- data %>% mutate(time = needed_time - time_generating)
# Add column for the length of the result (in characters)
data <- data %>% mutate(length = nchar(result))
# Add column for the subject (the userId)
data <- data %>% mutate(subject = floor(taskid/10))
head(data, 10)
# replace \n in result texts by whitespaces (to eliminate them from word counts)
data <- data %>% mutate(result = gsub('\\\\n|\\\\r', " ", result))
# compute and add WPM (according to related work simply divide the time by 5)
data <- data %>% mutate(wpm = (length/5)/(time/60))
# count words of text
data <- data %>% mutate(word_count=str_count(result, "\\w+"))
# compute time in minutes
data <- data %>% mutate(time_minutes = (time/60))
# compute wpm based on time and word count
data <- data %>% mutate(wpm_time_word_count = word_count / time_minutes)
# preprocess ratings for GEEs
data$question0 <- as.ordered(data$question0)
# preprocess ratings for GEEs
data$question0 <- as.ordered(data$question0)
data$question1 <- as.ordered(data$question1)
data$question2 <- as.ordered(data$question2)
data$question3 <- as.ordered(data$question3)
data$question4 <- as.ordered(data$question4)
data$question5 <- as.ordered(data$question5)
data$subject <- as.factor(data$subject)
data$method <- as.factor(data$method)
data_cols = list(
"question0",
"question1",
"question2",
"question3",
"question4",
"question5"
)
data$question0 <- as.ordered(data$question0)
data$question1 <- as.ordered(data$question1)
data$question2 <- as.ordered(data$question2)
data$question3 <- as.ordered(data$question3)
data$question4 <- as.ordered(data$question4)
data$question5 <- as.ordered(data$question5)
for (col in data_cols)
{
print(sprintf("*****************************"))
print(sprintf("Analyzing %s ...", col))
print(sprintf("*****************************"))
formula <- paste(col, "~ method")
print(sprintf("Using formula: %s", formula))
gee <- ordLORgee(formula, id = data$subject, data = data)
print(summary(gee))
print(exp(coef(gee)))
}
View(data)
# friedman test and wilcoxcon signed rank for amounts_back between method 1 and 2
test_data = data[c("method","question0", "subject")]
friedman_test(question0 ~ method | subject, data=test_data)
View(test_data)
# friedman test and wilcoxcon signed rank for amounts_back between method 1 and 2
test_data = data[c("method","question0", "subject")]
friedman_test(question0 ~ method | subject, data=test_data)
View(test_data)
install packages
install.packages("MASS")
library(MASS)
library(car)
install.packages(car)
install.packages("car")
library(MASS)
library(car)
m = polr(question0 ~ method, data=data)
print(summary(me))
library(MASS)
library(car)
m = polr(question0 ~ method, data=data)
print(summary(m))
#print(exp(coef(gee)))
#Anova(m, type=3)
library(MASS)
library(car)
m = polr(question0 ~ method, data=data)
print(summary(m))
#print(exp(coef(gee)))
#Anova(m, type=3)
library(MASS)
library(car)
m = polr(question0 ~ method, data=data)
print(summary(m))
#print(exp(coef(gee)))
Anova(m, type=3)
data$subject <- as.factor(data$subject)
data$method <- as.factor(data$method)
data_cols = list(
"question1",
"question2",
"question3",
"question4",
"question5"
)
data$question0 <- as.ordered(data$question0)
data$question1 <- as.ordered(data$question1)
data$question2 <- as.ordered(data$question2)
data$question3 <- as.ordered(data$question3)
data$question4 <- as.ordered(data$question4)
data$question5 <- as.ordered(data$question5)
for (col in data_cols)
{
print(sprintf("*****************************"))
print(sprintf("Analyzing %s ...", col))
print(sprintf("*****************************"))
formula <- paste(col, "~ method")
print(sprintf("Using formula: %s", formula))
gee <- ordLORgee(formula, id = data$subject, data = data)
print(summary(gee))
print(exp(coef(gee)))
}
data$subject <- as.factor(data$subject)
data$method <- as.factor(data$method)
data_cols = list(
"question1",
"question2",
"question3",
"question4",
"question5"
)
data$question0 <- as.ordered(data$question0)
data$question1 <- as.ordered(data$question1)
data$question2 <- as.ordered(data$question2)
data$question3 <- as.ordered(data$question3)
data$question4 <- as.ordered(data$question4)
data$question5 <- as.ordered(data$question5)
for (col in data_cols)
{
print(sprintf("*****************************"))
print(sprintf("Analyzing %s ...", col))
print(sprintf("*****************************"))
formula <- paste(col, "~ method")
print(sprintf("Using formula: %s", formula))
gee <- ordLORgee(formula, id = data$subject, data = data)
print(summary(gee))
print("OI")
print(exp(coef(gee)))
}
data$subject <- as.factor(data$subject)
data$method <- as.factor(data$method)
data_cols = list(
"question1",
"question2",
"question3",
"question4",
"question5"
)
data$question0 <- as.ordered(data$question0)
data$question1 <- as.ordered(data$question1)
data$question2 <- as.ordered(data$question2)
data$question3 <- as.ordered(data$question3)
data$question4 <- as.ordered(data$question4)
data$question5 <- as.ordered(data$question5)
for (col in data_cols)
{
print(sprintf("*****************************"))
print(sprintf("Analyzing %s ...", col))
print(sprintf("*****************************"))
formula <- paste(col, "~ method")
print(sprintf("Using formula: %s", formula))
gee <- ordLORgee(formula, id = data$subject, data = data)
print(summary(gee))
print("OI")
print(exp(coef(gee)))
}
data$subject <- as.factor(data$subject)
data$method <- as.factor(data$method)
data_cols = list(
"question0",
"question1",
"question2",
"question3",
"question4",
"question5"
)
data$question0 <- as.ordered(data$question0)
data$question1 <- as.ordered(data$question1)
data$question2 <- as.ordered(data$question2)
data$question3 <- as.ordered(data$question3)
data$question4 <- as.ordered(data$question4)
data$question5 <- as.ordered(data$question5)
for (col in data_cols)
{
print(sprintf("*****************************"))
print(sprintf("Analyzing %s ...", col))
print(sprintf("*****************************"))
formula <- paste(col, "~ method")
print(sprintf("Using formula: %s", formula))
gee <- ordLORgee(formula, id = data$subject, data = data)
print(summary(gee))
print("OI")
print(exp(coef(gee)))
}
data$subject <- as.factor(data$subject)
data$method <- as.factor(data$method)
data$task <- as.factor(data$task)
data_cols = list(
"question0",
"question1",
"question2",
"question3",
"question4",
"question5"
)
data$question0 <- as.ordered(data$question0)
data$question1 <- as.ordered(data$question1)
data$question2 <- as.ordered(data$question2)
data$question3 <- as.ordered(data$question3)
data$question4 <- as.ordered(data$question4)
data$question5 <- as.ordered(data$question5)
for (col in data_cols)
{
print(sprintf("*****************************"))
print(sprintf("Analyzing %s ...", col))
print(sprintf("*****************************"))
formula <- paste(col, "~ method")
print(sprintf("Using formula: %s", formula))
gee <- ordLORgee(formula, id = data$subject, data = data)
print(summary(gee))
print("OI")
print(exp(coef(gee)))
}
data$subject <- as.factor(data$subject)
data$method <- as.factor(data$method)
data$task <- as.factor(data$task)
data_cols = list(
"question0",
"question1",
"question2",
"question3",
"question4",
"question5"
)
data$question0 <- as.ordered(data$question0)
data$question1 <- as.ordered(data$question1)
data$question2 <- as.ordered(data$question2)
data$question3 <- as.ordered(data$question3)
data$question4 <- as.ordered(data$question4)
data$question5 <- as.ordered(data$question5)
for (col in data_cols)
{
print(sprintf("*****************************"))
print(sprintf("Analyzing %s ...", col))
print(sprintf("*****************************"))
formula <- paste(col, "~ method * task")
print(sprintf("Using formula: %s", formula))
gee <- ordLORgee(formula, id = data$subject, data = data)
print(summary(gee))
print("OI")
print(exp(coef(gee)))
}
<<<<<<< HEAD
x <- overview(data, 'time', 10, 0)
library(dplyr)
library(ggplot2)
library(dplyr)
library(ggplot2)
# not included:
# - user13, had problems with WWS
# - user30, did the study on a laptop
all_users <- list(user12, user14, user15, user16, user17, user18, user19, user20, user21, user22, user23, user24, user25, user26, user28, user31, user32)
# The data of all users combined to one DataFrame
data <- bind_rows(all_users)
actions <- read.csv("D:/Daten (D)/Uni/6. Semester/BA-Arbeit/project/dataeval/data/actions.csv")
View(actions)
head(actions)
hist(actions$amount_actions)
backs <- read.csv("D:/Daten (D)/Uni/6. Semester/BA-Arbeit/project/dataeval/data/backs.csv")
View(backs)
backs
hist(backs$avg_len_backsequs)
merge(data, actions, by='taskid')
merge(data, backs, by='taskid')
data <- merge(data, actions, by='taskid')
merge(data, backs, by='taskid')
# Add column for the real needed time (without the time used for generating)
data <- data %>% mutate(time = needed_time - time_generating)
# Add column for the length of the result (in characters)
data <- data %>% mutate(length = nchar(result))
# Add column for the subject (the userId)
data <- data %>% mutate(subject = floor(taskid/10))
# Add column for the words per minute
data <- data %>% mutate(wpm = (length/5)/time)
head(data, 10)
# Merge the DataFrames actions and backs, which include results from the logging files, with the data
data <- merge(data, actions, by='taskid')
data <- merge(data, backs, by='taskid')
# Add column for the real needed time (without the time used for generating)
data <- data %>% mutate(time = needed_time - time_generating)
# Add column for the length of the result (in characters)
data <- data %>% mutate(length = nchar(result))
# Add column for the subject (the userId)
data <- data %>% mutate(subject = floor(taskid/10))
# Add column for the words per minute
data <- data %>% mutate(wpm = (length/5)/time)
head(data, 10)
# not included:
# - user13, had problems with WWS
# - user30, did the study on a laptop
all_users <- list(user12, user14, user15, user16, user17, user18, user19, user20, user21, user22, user23, user24, user25, user26, user28, user31, user32)
# The data of all users combined to one DataFrame
data <- bind_rows(all_users)
# Merge the DataFrames actions and backs, which include results from the logging files, with the data
data <- merge(data, actions, by='taskid')
data <- merge(data, backs, by='taskid')
# Add column for the real needed time (without the time used for generating)
data <- data %>% mutate(time = needed_time - time_generating)
# Add column for the length of the result (in characters)
data <- data %>% mutate(length = nchar(result))
# Add column for the subject (the userId)
data <- data %>% mutate(subject = floor(taskid/10))
# Add column for the words per minute
data <- data %>% mutate(wpm = (length/5)/time)
head(data, 10)
# Add column for the real needed time (without the time used for generating) (in seconds)
data <- data %>% mutate(time = needed_time - time_generating)
# Add column for the length of the result (in characters)
data <- data %>% mutate(length = nchar(result))
# Add column for the subject (the userId)
data <- data %>% mutate(subject = floor(taskid/10))
# Add column for the words per minute
data <- data %>% mutate(wpm = (length/5)/(time/60))
head(data, 10)
hist(data$wpm)
# Add column for the real needed time (without the time used for generating) (in seconds)
data <- data %>% mutate(time = needed_time - time_generating)
# Add column for the length of the result (in characters)
data <- data %>% mutate(length = nchar(result))
# Add column for the subject (the userId)
data <- data %>% mutate(subject = floor(taskid/10))
# Add column for the words per minute
data <- data %>% mutate(wpm = (length/5)/(time/60))
head(data, 10)
data %>% select(taskid ,method, task, wpm)
x <- overview(data, 'wpm', 10, 0)
x <- overview(data, 'wpm', 20, 2)
x <- overview(data, 'wpm', 5, 2)
x <- overview(data, 'wpm', 3, 2)
x <- overview(data, 'wpm', 1, 2)
x <- overview(data, 'wpm', 5, 2)
library(dplyr)
library(ggplot2)
# not included:
# - user13, had problems with WWS
# - user30, did the study on a laptop
all_users <- list(user12, user14, user15, user16, user17, user18, user19, user20, user21, user22, user23, user24, user25, user26, user28, user31, user32)
# The data of all users combined to one DataFrame
data <- bind_rows(all_users)
# Merge the DataFrames actions and backs, which include results from the logging files, with the data
data <- merge(data, actions, by='taskid')
data <- merge(data, backs, by='taskid')
# Add column for the real needed time (without the time used for generating) (in seconds)
data <- data %>% mutate(time = needed_time - time_generating)
# Add column for the length of the result (in characters)
data <- data %>% mutate(length = nchar(result))
# Add column for the subject (the userId)
data <- data %>% mutate(subject = floor(taskid/10))
# Add column for the words per minute
data <- data %>% mutate(wpm = (length/5)/(time/60))
head(data, 10)
overview <- function(df, col, bin_width, filter_by_method=-1, filter_by_task=-1) {
if (filter_by_method != -1) {
df <- df %>% filter(method == filter_by_method)
}
if (filter_by_task != -1) {
df <- df %>% filter(task == filter_by_task)
}
vals <- df %>% pull(col)
q1 <- quantile(vals, 0.25)
q3 <- quantile(vals, 0.75)
median <- quantile(vals, 0.5)
mean <- mean(vals)
stde <- sd(vals)
hist <- qplot(x, geom='histogram',
binwidth = bin_width,
xlab = col,
ylab = 'Frequency',
fill=I("blue"),
col=I("darkblue"),
alpha=I(.2),
show.legend=TRUE) +
geom_vline(aes(xintercept=median,
color=I("Median")),
linetype="solid",
size=1,
show.legend=TRUE) +
geom_vline(aes(xintercept=q1,
color=I("Q1/Q3")),
linetype="solid",
size=1,
show.legend=TRUE) +
geom_vline(aes(xintercept=q3,
color=I("Q1/Q3")),
linetype="solid",
size=1,
show.legend=TRUE) +
geom_vline(aes(xintercept=mean,
color=I("Mean")),
linetype="solid",
size=1) +
scale_colour_manual("",
breaks = c("Mean", "Median", "Q1/Q3"),
values = c("purple", "orange", "green"))
print(hist)
print(paste("Mean:", mean))
print(paste("Q1:", q1))
print(paste("Median:", median))
print(paste("Q3:", q3))
print(paste("Standard Deviation:", stde))
return (vals)
}
x <- overview(data, 'wpm', 5, 2)
# Merge the DataFrames actions and backs, which include results from the logging files, with the data
data <- merge(data, actions, by='taskid')
data <- merge(data, backs, by='taskid')
# Add column for the real needed time (without the time used for generating) (in seconds)
data <- data %>% mutate(time = needed_time - time_generating)
# Add column for the length of the result (in characters)
data <- data %>% mutate(length = nchar(result))
# Add column for the subject (the userId)
data <- data %>% mutate(subject = floor(taskid/10))
# Add column for the words per minute
data <- data %>% mutate(wpm = (length/5)/(time/60))
head(data, 10)
library(dplyr)
library(ggplot2)
# not included:
# - user13, had problems with WWS
# - user30, did the study on a laptop
all_users <- list(user12, user14, user15, user16, user17, user18, user19, user20, user21, user22, user23, user24, user25, user26, user28, user31, user32)
# The data of all users combined to one DataFrame
data <- bind_rows(all_users)
# Merge the DataFrames actions and backs, which include results from the logging files, with the data
data <- merge(data, actions, by='taskid')
data <- merge(data, backs, by='taskid')
# Add column for the real needed time (without the time used for generating) (in seconds)
data <- data %>% mutate(time = needed_time - time_generating)
# Add column for the length of the result (in characters)
data <- data %>% mutate(length = nchar(result))
# Add column for the subject (the userId)
data <- data %>% mutate(subject = floor(taskid/10))
# Add column for the words per minute
data <- data %>% mutate(wpm = (length/5)/(time/60))
head(data, 10)
View(actions)
View(backs)
library(dplyr)
library(ggplot2)
# not included:
# - user13, had problems with WWS
# - user30, did the study on a laptop
all_users <- list(user12, user14, user15, user16, user17, user18, user19, user20, user21, user22, user23, user24, user25, user26, user28, user31, user32)
# The data of all users combined to one DataFrame
data <- bind_rows(all_users)
# Merge the DataFrames actions and backs, which include results from the logging files, with the data
data <- merge(data, actions, by='taskid')
data <- merge(data, backs, by='taskid')
# Add column for the real needed time (without the time used for generating) (in seconds)
data <- data %>% mutate(time = needed_time - time_generating)
# Add column for the length of the result (in characters)
data <- data %>% mutate(length = nchar(result))
# Add column for the subject (the userId)
data <- data %>% mutate(subject = floor(taskid/10))
# Add column for the words per minute
data <- data %>% mutate(wpm = (length/5)/(time/60))
head(data, 10)
=======
View(data)
>>>>>>> d5e25a5 (added code for counts and task completion time)
